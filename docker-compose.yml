services:
  postgres:
    image: postgres:15.1
    restart: always
    user: postgres
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "db_prod" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
  redis:
    image: redis:latest
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis_data:/data
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli", "ping" ]
      interval: 5s
      timeout: 1s
      retries: 3
    restart: unless-stopped

  backend_1:
    build:
      context: .
      dockerfile: ./deployments/backend/Dockerfile
    ports:
      - "${HTTP_PORT_1}:${HTTP_PORT_1}"
      - "${GRPC_PORT_1}:${GRPC_PORT_1}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env

  backend_2:
    build:
      context: .
      dockerfile: ./deployments/backend/Dockerfile
    ports:
      - "${HTTP_PORT_2}:${HTTP_PORT_2}"
      - "${GRPC_PORT_2}:${GRPC_PORT_2}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env

  backend_3:
    build:
      context: .
      dockerfile: ./deployments/backend/Dockerfile
    ports:
      - "${HTTP_PORT_3}:${HTTP_PORT_3}"
      - "${GRPC_PORT_3}:${GRPC_PORT_3}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./build/nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      backend_1:
        condition: service_started
      backend_2:
        condition: service_started
      backend_3:
        condition: service_started

volumes:
  postgres_data:
  redis_data: