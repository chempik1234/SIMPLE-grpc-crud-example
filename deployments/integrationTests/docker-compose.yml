version: '3.8'

services:
  postgres:
    image: postgres:15.1
    restart: always
    user: postgres
    ports:
      - "5432:5432"
    # volumes:
    #   - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: db_test
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpassword
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "db_test" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    networks:
      - deployments_service_network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    # volumes:
    #   - redis_data:/data
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli", "ping" ]
      interval: 5s
      timeout: 1s
      retries: 3
    restart: unless-stopped
    networks:
      - deployments_service_network

  backend_1:
    image: orders_service
    ports:
      - "8081:8081"
      - "50051:50051"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpassword
      POSTGRES_DB: db_test
      REDIS_HOST: redis
      REDIS_PORT: 6379
      HTTP_PORT: 8081
      GRPC_PORT: 50051
    networks:
      - deployments_service_network

  backend_2:
    image: orders_service
    ports:
      - "8082:8082"
      - "50052:50052"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpassword
      POSTGRES_DB: db_test
      REDIS_HOST: redis
      REDIS_PORT: 6379
      HTTP_PORT: 8082
      GRPC_PORT: 50052
    networks:
      - deployments_service_network

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
    networks:
      - deployments_service_network
    depends_on:
      backend_1:
        condition: service_started
      backend_2:
        condition: service_started

# volumes:
#   postgres_data:
#   redis_data:

networks:
  deployments_service_network: